<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>goroutine on dtaskai&#39;s blog</title>
    <link>https://dtaskai.me/tags/goroutine/</link>
    <description>Recent content in goroutine on dtaskai&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright 2022, Dominik TÃ¡skai</copyright>
    <lastBuildDate>Mon, 30 May 2022 15:29:21 +0200</lastBuildDate><atom:link href="https://dtaskai.me/tags/goroutine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cancel a launched goroutine</title>
      <link>https://dtaskai.me/post/go-cancel-a-launched-goroutine/</link>
      <pubDate>Mon, 30 May 2022 15:29:21 +0200</pubDate>
      
      <guid>https://dtaskai.me/post/go-cancel-a-launched-goroutine/</guid>
      <description>One of the more challenging tasks in the past few months was for me was to find a way to implement the following feature:
After a set amount of seconds (provided in the form of an environment variable) launch a goroutine which sends control data to another service with a way to cancel the whole process in case of an external event. If you come from perhaps a Java background then this task seems pretty trivial, you &amp;ldquo;just&amp;rdquo; have to call the interrupt() function on your thread, but with goroutines this is not an option.</description>
    </item>
    
  </channel>
</rss>
